<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Wil Boayue]]></title>
  <link href="http://wil.boayue.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://wil.boayue.com/"/>
  <updated>2016-06-03T09:57:09-04:00</updated>
  <id>http://wil.boayue.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Automatic Resource Management]]></title>
    <link href="http://wil.boayue.com/blog/2013/09/13/java-7-automatic-resource-management/"/>
    <updated>2013-09-13T13:00:00-04:00</updated>
    <id>http://wil.boayue.com/blog/2013/09/13/java-7-automatic-resource-management</id>
    <content type="html"><![CDATA[<p>You might have seen
<a href="http://docs.oracle.com/javase/tutorial/essential/io/bytestreams.html">this example</a>
from <a href="http://docs.oracle.com/javase/tutorial/index.html">The Java Tutorials</a>.</p>

<p>{% codeblock lang:java %}</p>

<pre><code>public class CopyBytes {
    public static void main(String[] args) throws IOException {

        FileInputStream in = null;
        FileOutputStream out = null;

        try {
            in = new FileInputStream("xanadu.txt");
            out = new FileOutputStream("outagain.txt");
            int c;

            while ((c = in.read()) != -1) {
                out.write(c);
            }
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
}
</code></pre>

<p>{% endcodeblock %}</p>

<p>Unfortunately, this code has a bug. If an exception is thrown while closing
the input stream on line #21, the output stream will not be closed on line #24.</p>

<p>Prior to Java 7 a clean version of this could be written
with the <a href="http://commons.apache.org/proper/commons-io/">Commons IO</a>: IOUtils or
<a href="https://code.google.com/p/guava-libraries/">Google Guava</a>: Closer utility classes.</p>

<p>The following is a correct implementation using <a href="https://code.google.com/p/guava-libraries/">Google Guava</a>.</p>

<p>{% codeblock lang:java %}</p>

<pre><code>public class CopyBytes {
    public static void main(String[] args) throws IOException {

        Closer closer = Closer.create();

        try {
            InputStream in = closer.register(new FileInputStream("xanadu.txt"));
            OutputStream out = closer.register(new FileOutputStream("outagain.txt"));

            int c;

            while ((c = in.read()) != -1) {
                out.write(c);
            }
        } catch (Throwable e) {
          throw closer.rethrow(e);
        } finally {
          closer.close();
        }
    }
}
</code></pre>

<p>{% endcodeblock %}</p>

<p>Language support for managing the common pattern makes it even easier in Java 7.</p>

<p>{% codeblock lang:java %}</p>

<pre><code>public class CopyBytes {
    public static void main(String[] args) throws IOException {
        try (
          FileInputStream in = new FileInputStream("xanadu.txt");
          FileOutputStream out = new FileOutputStream("outagain.txt");

        ) {
            int c;

            while ((c = in.read()) != -1) {
                out.write(c);
            }
        }
    }
}
</code></pre>

<p>{% endcodeblock %}</p>

<p>Get the details in this <a href="http://www.oracle.com/technetwork/articles/java/trywithresources-401775.html">article</a></p>
]]></content>
  </entry>
  
</feed>
